configfile: "config.yaml"

ACC = config["acc"]
IDS = [1,2]

wildcard_constraints:
    taxon="[^_]+"

rule all:
    input:
        expand("01_bowtie2/{acc}.sam",acc=ACC)

rule bowtiebuild:
    input:
        config["taxdb_path"]+config["origin"]+"/"+config["test_genome"]+".gz"
    params:
        name=config["test_genome"]
    output:
        "00_bowtie2_index/"+config["test_genome"]+".1.bt2",
        "00_bowtie2_index/"+config["test_genome"]+".2.bt2",
        "00_bowtie2_index/"+config["test_genome"]+".3.bt2",
        "00_bowtie2_index/"+config["test_genome"]+".4.bt2",
        "00_bowtie2_index/"+config["test_genome"]+".rev.1.bt2",
        "00_bowtie2_index/"+config["test_genome"]+".rev.2.bt2"
    threads:
        8
    shell:
        """
        mkdir -p 00_bowtie2_index; 
        bowtie2-build {input} 00_bowtie2_index/{params.name} --threads {threads}
        """


rule bowtie:
    params:
        X=lambda wildcards: config["acc"][wildcards.acc],
        x="00_bowtie2_index/"+config["test_genome"]
    input:
        read1=config["path"]+"{acc}_1.fastq.gz",
        read2=config["path"]+"{acc}_2.fastq.gz",
        i1="00_bowtie2_index/"+config["test_genome"]+".1.bt2",
        i2="00_bowtie2_index/"+config["test_genome"]+".2.bt2",
        i3="00_bowtie2_index/"+config["test_genome"]+".3.bt2",
        i4="00_bowtie2_index/"+config["test_genome"]+".4.bt2",
        i5="00_bowtie2_index/"+config["test_genome"]+".rev.1.bt2",
        i6="00_bowtie2_index/"+config["test_genome"]+".rev.2.bt2"        
    output:
        "01_bowtie2/{acc}.bam",
    threads:
        56
    log:
        "logs/bowtie2/{acc}.log"
    shell:
        """
        mkdir -p "00_bowtie2_index"; 
        bowtie2 -x {params.x} -1 {input.read1} -2 {input.read2} -X {params.X} --threads {threads}  | samtools sort - -o {output} 2>> samtools.err
        """


rule annotateRTE:
    input:
        genome=config["taxdb_path"]+config["origin"]+"/"+config["test_genome"]+".gz",
        lib=lambda wildcards: config["TE"][wildcards.te]   
    output:
        "02_TEcoord_{te}/"+config["test_genome"]+".out"
    params:
        unzipped=config["taxdb_path"]+config["origin"]+"/"+config["test_genome"],
        te="{te}"
    threads:
        56
    shell:
        """
        set +eou;
        mkdir -p 02_TEcoord_{params.te};
        gunzip -c {input.genome} > {params.unzipped};
        set -eou;
        RepeatMasker -pa {threads} -lib {input.lib} -no_is -nocut -nolow -norna -dir 02_TEcoord_{params.te} {params.unzipped};
        #rm {params.unzipped};
        """

# bam to bed; filter: min id, min length
rule bedfile:
    input:
        "02_TEcoord_{te}/"+config["test_genome"]+".out"
    output: 
        "02_TEcoord_{te}/"+config["test_genome"]+".bed"
    params:
        te=lambda wildcards: config["TE"][wildcards.te]
    shell:
        """
        awk 'BEGIN{{OFS="\t"}}; $2<20 && $7-$6>200 {{print $5,$6,$7,"-",$9}}' {input} | 
        sed 's/C$/-/g' > {output} 
        """

# Reads intersect with TE annotation 
rule intersectBed:
    input: 
        bam="01_bowtie2/{acc}.bam",
        bed="02_TEcoord_{te}/"+config["test_genome"]+".bed"
    output:
        "03_intersect_{te}/{acc}.bam"
    params:
        te="{te}"                
    shell:
        """
        mkdir -p 03_intersect_{params.te};
        bedtools intersect -wa -f 1.0 -abam {input.bam} -b {input.bed} > {output}
        """

# Filter conc/disc/unmap
rule samtools:
    input:
        bam="03_intersect_{te}/{acc}.bam",
        fastq1=config["path"]+"{acc}_1.fastq.gz",
        fastq2=config["path"]+"{acc}_2.fastq.gz"
    output:
        mates1="04_mates_{te}/{acc}_1_mates.fasta",
        mates2="04_mates_{te}/{acc}_2_mates.fasta",
        TEreads1="04_mates_{te}/{acc}_1_singles.fasta",
        TEreads2="04_mates_{te}/{acc}_2_singles.fasta",
        tmp1="04_mates_{te}/{acc}_singles.fasta.gz",
        tmp1a="04_mates_{te}/{acc}_pairs.fasta",
        tmp2="04_mates_{te}/{acc}_1_singles.txt",
        tmp3="04_mates_{te}/{acc}_2_singles.txt"
    params:
        te="{te}",
        acc="{acc}"
    shell:
        """
        set +eou;
        mkdir -p 04_mates_{params.te};
        samtools collate --threads 1 -O {input.bam} tmp.{params.acc} | samtools fasta --threads 1 -s {output.tmp1} - >  {output.tmp1a};
        zcat {output.tmp1} | grep '>' | grep '/1$' | sed 's@/1@@g; s@>@@g' > {output.tmp2};
        zcat {output.tmp1} | grep '>' | grep '/2$' | sed 's@/2@@g; s@>@@g' > {output.tmp3}; 
        seqtk subseq {input.fastq2} {output.tmp2} | seqtk seq -a - > {output.mates1};
        seqtk subseq {input.fastq1} {output.tmp3} | seqtk seq -a - > {output.mates2};
        bioawk -c fastx '$name ~ /\\/1/ {{print ">"$name; print $seq}}' {output.tmp1} > {output.TEreads1};
        bioawk -c fastx '$name ~ /\\/2/ {{print ">"$name; print $seq}}' {output.tmp1} > {output.TEreads2}; 
        set -euo;
        """

# mask mate
rule RM:
    input: 
        mates="04_mates_{te}/{acc}_{id}_mates.fasta",
        singles="04_mates_{te}/{acc}_{id}_singles.fasta",
        lib=config["TEdb"]
    output:
        mates="04_mates_{te}/{acc}_{id}_mates.fasta.out",
        singles="04_mates_{te}/{acc}_{id}_singles.fasta.out"
    threads:
        56
    params:
        outdir="04_mates_{te}"
    shell:
        """
        RepeatMasker -pa {threads} -lib {input.lib} -no_is -nocut -nolow -norna -dir {params.outdir} {input.mates}; 
        RepeatMasker -pa {threads} -lib {input.lib} -no_is -nocut -nolow -norna -dir {params.outdir} {input.singles}
        """

# get singles TE, get their mates non-masked 

rule filter_mates:
    input:
        singles="04_mates_{te}/{acc}_{id}_singles.fasta.out",
        mates="04_mates_{te}/{acc}_{id}_mates.fasta.out",
        mates_fasta="04_mates_{te}/{acc}_{id}_mates.fasta"
    output:
        mates_fasta="04_mates_{te}/{acc}_{id}_matesfiltered.fasta"
    params:
        te="{te}"
    script:
        "filter_mates.py"
    

include: "taxonomy.snake"


rule report:
    params:
    input:
    output: "report.html"
    run:
        from snakemake.utils import report
        with open(input[1]) as stats:
            f=print (stats.read())
        report("""
        TITLE
        ====================================================================================
        Description
        """, 
        output[0], R=input[0]
        )
