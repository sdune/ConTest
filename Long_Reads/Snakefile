# Configfile
configfile: "config.yaml"

# Variables
ACC,  = glob_wildcards(config["read_path"]+"{accall}.fastq.gz")

# Wildcard constraints
wildcard_constraints:
    tax="\s+",
    taxon="[^_]+",

# Target rule
rule all:
    input:
        expand("taxonomy_taxa.{te}.txt",te=config["TE"])

# Build diamond database
rule build_dmnd:
    input:
        TE=lambda wildcards: config["TE"][wildcards.te]
    output:
        "{te}.dmnd"       
    params:
        TE="{te}"
    shell:
        """
        diamond makedb --in {input.TE} -d {params.TE}
        """

# Identification of TE in reads 
rule diamond:
    input:
        db = "{te}.dmnd",
        fastq = config["read_path"]+"{acc}.fastq.gz"
    output:
        dmnd = "LR_{te}/{acc}.out6"
    log:
        "logs/diamond_{te}/{acc}.log"
    threads:
        56
    shell:  
        """
        diamond blastx --threads {threads} --db {input.db} --out {output.dmnd} --outfmt 6 --query {input.fastq} --more-sensitive 2>{log}
        """

# Get names of reads with TE
rule get_readids:
    input:
        "LR_{te}/{acc}.out6"
    output:
        "LR_{te}/{acc}_filtered.txt"
    shell:
        """
        set +oue
        awk -F'\t' '$11<1e-10 {{print $1}}' {input} > {output} 
        set -oue
        """

# Make fasta file with reads containing TE
rule get_reads:
    input:
        reads="LR_{te}/{acc}_filtered.txt",
        fastq=config["read_path"]+"{acc}.fastq.gz"
    output:
        "LR_{te}/{acc}.dmndhits.fasta"
    shell:
        "seqtk subseq {input.fastq} {input.reads} | seqtk seq -a - > {output} "


# Mask reads
rule RepeatMasker:
    input:
        "LR_{te}/{acc}.dmndhits.fasta"
    output:
        out="LR_{te}/{acc}.dmndhits.fasta.out",
        masked="LR_{te}/{acc}.dmndhits.fasta.masked"
    threads:
        56
    params:
        outdir="LR_{te}",
        repbase=config["TEdb"]
    log:
        "logs/RepeatMasker_{te}/{acc}.log"
    shell:
        """
        set +eou
        RepeatMasker -pa {threads} -s -no_is -nocut -nolow -lib {params.repbase} -dir {params.outdir} {input} 
        set -eou
        """


# Select reads that were masked as TE 
rule get_reciprocal_reads:
    input: "LR_{te}/{acc}.dmndhits.fasta.out"
    output: "LR_{te}/{acc}.reciprocal.txt"
    params:
        allTEs=config["recip_TEs"],
        tefasta=lambda wildcards: config["TE"][wildcards.te]
    shell:
        """
        set +eou
        sort -k5,5 -k1,1gr {input} | awk '{{print $0,"\t",$5}}' | uniq -f 15 | 
        grep -f <(grep '>' {params.allTEs} | cut -f 1 | sed 's/>//g') | awk '{{print $5}}'  > {output}
        set -euo
        """

# Make fasta file with reads
rule get_reciprocal_fastas:
    input:
        txt="LR_{te}/{acc}.reciprocal.txt",
        fasta="LR_{te}/{acc}.dmndhits.fasta.masked"
    output:
        "LR_{te}/{acc}.reciprocal.fasta"
    params:
        out="{acc}"
    shell:
        """
        seqtk subseq {input.fasta} {input.txt} > {output}
        """

       
include: "scripts/taxonomy.snake"

